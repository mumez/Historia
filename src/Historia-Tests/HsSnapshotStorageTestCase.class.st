Class {
	#name : 'HsSnapshotStorageTestCase',
	#superclass : 'HsBaseTestCase',
	#category : 'Historia-Tests',
	#package : 'Historia-Tests'
}

{ #category : 'tests' }
HsSnapshotStorageTestCase >> testListSnapshotVersionsReversedFromLast [
	| spaceId versions models modelSpace snapStorage lastThree lastOne all twenty |
	spaceId := 'hs-ssListSnapshotVersionsReversedFromLast'.
	modelSpace := HsModelSpace spaceId: spaceId.
	self spaces: { modelSpace } do: [
	models := {#num -> 0} asDictionary.
	modelSpace models: models.
	1 to: 20 do: [ :idx |
		models at: #num put: idx.
		modelSpace saveSnapshot: (RsStreamMessageId mainId: 10000 + idx subId: 100 + idx).
	].
	snapStorage := modelSpace snapshotStorage.
	versions := snapStorage listSnapshotVersions.
	self assert: versions size equals: 20.
	
	lastThree := snapStorage listSnapshotVersionsReversedFromLast: 3.
	self assert: lastThree size equals: 3.
	self assertCollection: lastThree asArray equals: #('10020-120' '10019-119' '10018-118').
	
	lastOne := snapStorage listSnapshotVersionsReversedFromLast: 1.
	self assertCollection: lastOne asArray equals: #('10020-120').
	
	all := snapStorage listSnapshotVersionsReversedFromLast: 0.
	twenty := snapStorage listSnapshotVersionsReversedFromLast: 20.
	self assertCollection: all asArray equals: twenty asArray.
	]
	
]

{ #category : 'tests' }
HsSnapshotStorageTestCase >> testListSnapshotVersionsReversedFromLimit [
	| spaceId versions models modelSpace snapStorage lastThree fromVersion nextThree nextToFirst |
	spaceId := 'hs-ssListSnapshotVersionsReversedFromLimit'.
	modelSpace := HsModelSpace spaceId: spaceId.
	self spaces: { modelSpace } do: [
	models := {#num -> 0} asDictionary.
	modelSpace models: models.
	1 to: 20 do: [ :idx |
		models at: #num put: idx.
		modelSpace saveSnapshot: (RsStreamMessageId mainId: 10000 + idx subId: 100 + idx).
	].
	snapStorage := modelSpace snapshotStorage.
	versions := snapStorage listSnapshotVersions.
	self assert: versions size equals: 20.
	
	lastThree := snapStorage listSnapshotVersionsReversedFromLast: 3.
	fromVersion := lastThree last.
	nextThree := snapStorage listSnapshotVersionsReversedFrom: fromVersion limit: 3.
	self assert: nextThree size equals: 3.
	self assertCollection: nextThree asArray equals: #('10018-118' '10017-117' '10016-116').
	nextToFirst := snapStorage listSnapshotVersionsReversedFrom: '10016-116' limit: 30.
	self assert: nextToFirst size equals: 16.
	self assert: nextToFirst last equals: '10001-101'.
	
	]
	
]

{ #category : 'tests' }
HsSnapshotStorageTestCase >> testSaveAndLoad [
	| spaceId versions models modelSpace snapStorage |
	spaceId := 'hs-ssSaveAndLoad'.
	modelSpace := HsModelSpace spaceId: spaceId.
	self spaces: { modelSpace } do: [
	models := {#a -> 'aaa'} asDictionary.
	modelSpace models: models.
	modelSpace saveSnapshot: (RsStreamMessageId idWithAutoSequence: 0).
	models at: #a put: 'bbb'.
	modelSpace saveSnapshot: (RsStreamMessageId idWithAutoSequence: 1).
	models at: #a put: 'ccc'.
	modelSpace saveSnapshot: (RsStreamMessageId idWithAutoSequence: 2).
	modelSpace models: nil.
	
	snapStorage := modelSpace snapshotStorage.
	
	versions := snapStorage listSnapshotVersions.
	self assert: versions size equals: 3.
	
	modelSpace loadSnapshot: snapStorage lastSnapshotVersion.
	self assert: (modelSpace models at: #a) equals: 'ccc'.
	
	modelSpace loadSnapshot: versions second.
	self assert: (modelSpace models at: #a) equals: 'bbb'.
	
	modelSpace loadSnapshot: versions first.
	self assert: (modelSpace models at: #a) equals: 'aaa'.
	]
	
]

{ #category : 'tests' }
HsSnapshotStorageTestCase >> testSnapshotVersions [
	| spaceId versions models modelSpace snapStorage versionString olderVersionString |
	spaceId := 'hs-ssSnapshotVersions'.
	modelSpace := HsModelSpace spaceId: spaceId.
	self spaces: { modelSpace } do: [
	models := {#num -> 0} asDictionary.
	modelSpace models: models.
	1 to: 20 do: [ :idx |
		models at: #num put: idx.
		modelSpace saveSnapshot: (RsStreamMessageId mainId: 10000 + idx subId: 100 + idx).
	].
	snapStorage := modelSpace snapshotStorage.
	snapStorage settings snapshotVersionsTakeChunkSize: 7.
	versions := snapStorage listSnapshotVersions.
	self assert: versions size equals: 20.
	
	versionString := '10015-115'.
	self assert: (snapStorage existsRecentSnapshotVersion: versionString).
	
	olderVersionString := '10009-109'.
	self deny: (snapStorage existsRecentSnapshotVersion: olderVersionString).
	
	self assert: (snapStorage recentSnapshotVersionFrom: '10009-120') equals: '10009-109'.
	self assert: (snapStorage recentSnapshotVersionFrom: '10003-100') equals: '10002-102'.
	self assert: (snapStorage recentSnapshotVersionFrom: '10002-102') equals: '10001-101'.
	self assert: (snapStorage recentSnapshotVersionFrom: '10001-101') equals: nil.
	
	]
	
]

{ #category : 'tests' }
HsSnapshotStorageTestCase >> testTakeSnapshotWithAutoGeneratedVersion [
	| spaceId versions models modelSpace snapStorage |
	spaceId := 'hs-ssTakeSnapshotWithAutoGeneratedVersion'.
	modelSpace := HsModelSpace spaceId: spaceId.
	self spaces: { modelSpace } do: [
	modelSpace saveSnapshot.
	models := {#a -> 'aaa'} asDictionary.
	modelSpace models: models.
	modelSpace saveSnapshot.
	models at: #a put: 'bbb'.
	modelSpace saveSnapshot.
	models at: #a put: 'ccc'.
	modelSpace saveSnapshot.
	modelSpace models: nil.
	
	snapStorage := modelSpace snapshotStorage.
	
	versions := snapStorage listSnapshotVersions.
	self assert: versions size equals: 4.
	
	modelSpace loadSnapshot: snapStorage lastSnapshotVersion.
	self assert: (modelSpace models at: #a) equals: 'ccc'.
	
	modelSpace loadSnapshot: versions third.
	self assert: (modelSpace models at: #a) equals: 'bbb'.
	
	modelSpace loadSnapshot: versions second.
	self assert: (modelSpace models at: #a) equals: 'aaa'.
	]
	
]
